// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUI.Specs.UIMap1Classes
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class UIMap1
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfButton plusButton = this.UIMainWindowWindow.PlusButton;
            WpfEdit screen = this.UIMainWindowWindow.Screen;
            WpfButton equalButton = this.UIMainWindowWindow.EqualButton;
            #endregion

            // Click '+' button
            Mouse.Click(plusButton, new Point(33, 1));

            // Type '1' in text box
            screen.Text = this.RecordedMethod1Params.ScreenText;

            // Click '+' button
            Mouse.Click(plusButton, new Point(46, 17));

            // Click '=' button
            Mouse.Click(equalButton, new Point(48, 6));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in text box
        /// </summary>
        public string ScreenText = "1";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton PlusButton
        {
            get
            {
                if ((this.mPlusButton == null))
                {
                    this.mPlusButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPlusButton.SearchProperties[WpfButton.PropertyNames.Name] = "+";
                    this.mPlusButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mPlusButton;
            }
        }
        
        public WpfEdit Screen
        {
            get
            {
                if ((this.mScreen == null))
                {
                    this.mScreen = new WpfEdit(this);
                    #region Search Criteria
                    this.mScreen.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mScreen;
            }
        }
        
        public WpfButton EqualButton
        {
            get
            {
                if ((this.mEqualButton == null))
                {
                    this.mEqualButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEqualButton.SearchProperties[WpfButton.PropertyNames.Name] = "=";
                    this.mEqualButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mEqualButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mPlusButton;
        
        private WpfEdit mScreen;
        
        private WpfButton mEqualButton;
        #endregion
    }
}
